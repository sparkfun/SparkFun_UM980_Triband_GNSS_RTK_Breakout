{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can get started playing around with the breakout board. For the scope of this tutorial, we will go over the examples from the Arduino Library. From there, we will be able to build our own custom code to integrate the development board into a project.</p>"},{"location":"arduino_examples/#example-1-position-velocity-and-time","title":"Example 1: Position, Velocity, and Time","text":"<p>In this example, we will query a UM980's UART2 port for its position, velocity, and time data.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example1_PositionVelocityTime . If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Give it a moment to check the satellites in view. You will be able to see your position, velocity, date, time, and the number of satellites in view.</p>"},{"location":"arduino_examples/#example-2-direct-connect","title":"Example 2: Direct Connect","text":"<p>In this example, characters coming from the UM980's UART2 port are echoed and send characters to the UM980. This allows a user to directly enter command strings into the UM980 while still connected to the Arduino. This is good for viewing the raw output from a given command.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example2_DirectConnect . If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200. For this example, make sure to have both NL &amp; *CR turned on.</p> <p>Type CONFIG and send the command through the serial terminal. You should receive a response with the current UM980 configuration. Make sure to check out the UM980's Reference Commands Manual linked in the Resources for more commands.</p>"},{"location":"arduino_examples/#example-3-ecef-and-stats","title":"Example 3: ECEF and Stats","text":"<p>This example will query the UM980's UART2 port for the signal quality and fix type.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example3_ECEFandStats . If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>The output will be similar to example 1 with additional information.</p>"},{"location":"arduino_examples/#example-4-enable-nmea-at-5hz","title":"Example 4: Enable NMEA at 5Hz","text":"<p>This example shows how to enable various NMEA sentences at different rates on different ports at 5Hz.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example4_EnableNMEA_5Hz .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>The output will begin outputting NEMA sentences.</p>"},{"location":"arduino_examples/#example-5-enable-rtcm","title":"Example 5: Enable RTCM","text":"<p>This example shows how to configure the UM980 into base mode using specified coordinates.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example5_EnableRTCM .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the example will begin outputting the RTCM data. The Serial Terminal will output random characters due to the RTCM being in binary. This data will be interpreted by other high precision RTK GNSS modules.</p>"},{"location":"arduino_examples/#example-6-average-base","title":"Example 6: Average Base","text":"<p>This example shows how to put the UM980 into a Base mode configuration using the average of positional fixes obtained over a 60 second period. We also turn on RTCM messages.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example6_AverageBase .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the example will begin outputting certain NMEA sentences and RTCM messages.</p>"},{"location":"arduino_examples/#example-7-fixed-base","title":"Example 7: Fixed Base","text":"<p>This example shows how to put the UM980 into a Base mode configuration using specified coordinates.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example7_FixedBase .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the example will begin outputting certain NMEA sentences and RTCM messages.</p>"},{"location":"arduino_examples/#example-8-set-constellations","title":"Example 8: Set Constellations","text":"<p>This example enables/disables various constellations to be included in position calculations for GPS, GLO, BDS, GAL, and QZSS.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example8_SetConstellations .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will respond with a message indicating if the GPS was enabled and the configuration is complete.</p>"},{"location":"arduino_examples/#example-9-signal-elevation","title":"Example 9: Signal Elevation","text":"<p>This example shows how set the Elevation Angle and minimum CN0 value required from a satellite to be included in the position calculation.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example9_SignalEleveation .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is configured.</p>"},{"location":"arduino_examples/#example-10-set-rover-mode","title":"Example 10: Set Rover Mode","text":"<p>This example shows how set the station mode to Survey, UAV, or Automotive.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example10_SetRoverMode.  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is configured. If you need to configure the device for a different mode, you will just need to use a single line comment (<code>//</code>) to adjust the code.</p>"},{"location":"arduino_examples/#example-11-usb-nmea","title":"Example 11: USB NMEA","text":"<p>This sketch turns on all the major NMEA sentences at 2Hz and prints the incoming serial out to the Serial port. This is useful for viewing the GNSS data in a program like u-center (u-blox's software) or UPrecise (Unicore's software).</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example11_UsbNMEA .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is configured.</p> <p>Disconnect the UM980 from the IoT RedBoard - ESP32. Then disconnect the USB cable from the IoT RedBoard - ESP32. Connect the USB cable between the UM980 and your computer. Open a terminal emulator set at 115200 baud. Once connected, you should begin seeing NMEA sentences through the USB port.</p> <p>Of course, you can also view the data through a GUI such as the u-center (u-blox's software) or UPrecise (Unicore's software) as well.</p>"},{"location":"arduino_examples/#example-12-factory-reset","title":"Example 12: Factory Reset","text":"<p>This example shows how set the UM980 back to factory defaults.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example12_FactoryReset .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is ready to be configured. Send a character through the Serial Monitor to factory reset the UM980. The code will then begin outputting the position, velocity, date, time, and satellites as shown in example 1. Give it a moment to check the satellites in view before getting valid data.</p>"},{"location":"arduino_examples/#example-13-send-command","title":"Example 13: Send Command","text":"<p>While the SparkFun UM980 Arduino library covers most of the features in the UM980, there may be a special command that is needed but not supported. This sketch shows how to send commands directly to the UM980.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example13_SendCommand* .  If you have not already, select your Board (in this case the **SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, there's not too much in the output. Try adjusting the ASCII command within the <code>myGNSS.sendCommand()</code> to send a different special command. For more information, try looking at the Reference Commands Manual in the Resources.</p>"},{"location":"arduino_examples/#example-14-set-pps","title":"Example 14: Set PPS","text":"<p>The example shows how to configure the PPS signal's width, frequency, and polarity.  </p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example14_SetPPS .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output just tells you the rate that the PPS is blinking at. If you look at the PPS LED on the UM980, the LED will blink at the rate that was set.</p>"},{"location":"arduino_examples/#example-15-query-device","title":"Example 15: Query Device","text":"<p>This example shows how to send the 'CONFIG' command to get a clear text response that the user can parse to see which settings are set. In this case, we will get the current configuration, version, mode, and mask from the UM980.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example15_QueryDevice .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p>"},{"location":"arduino_examples/#example-16-poll-for-valid-rtcm-messages","title":"Example 16: Poll for Valid RTCM Messages","text":"<p>The documentation for the UM980 does not explicitly state which RTCM messages are supported but by sending the enable command to the module we can insinuate which are supported. This sketch sends the 'RTCMxxxx' command and looks for an OK.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example15_PollForValidRTCMMessages .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you of the RTCM messages that are supported. As of the writing of this tutorial, there are 55 RTCM messages that are supported!</p>"},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>SparkFun has written a library to work with the Unicore UM980 module. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun Unicore GNSS\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun Unicore GNSS Arduino Library (ZIP)"},{"location":"firmware_update/","title":"Firmware Update","text":"<p>Note</p> <p>The following instructions were taken from the UPrecise User Manual: 2.2.11 Receiver Upgrade. For more information about how to use UPrecise software, make sure to check out the user manual.</p> <p>Note</p> <p>At the time of writing, UPrecise Version 1.0.639 was used. Note that the GUI appearance and features may change upon future releases.</p> <p>You can update your firmware (they call this a firmware upgrade in the manual) using Unicore's UPrecise software. Make sure to check Unicore's UM980 product page or download center for any firmware releases.</p> <p>We'll assume that you have the firmware downloaded at this point and connected to the UM980. With UPrecise open, click on the menu with the triple bar (\u2261) near the upper left of the window to expand the menu.</p> <p>The menu should expand with text next to each icon.</p> <p>Click on the Receiver Upgrade button. The following window should open up.</p> <p>Click the Select upgrade file button. Head to the folder where you downloaded the firmware and select the file. The extension should be a  *pkg file.</p> <p>Select the GNSS receiver that will be receiving the firmware update. In this case it was Receiver1. While we are at it, select either the \"Soft reset\" or \"Hard reset\". While updating, the module will need to be reset and this selection will determine the reset method. Let's select the \"Soft Reset\" and have Uprecise reset the module.</p> <p>When ready, hit the \"Start\" button!</p> <p>Warning</p> <p>Make sure to pay attention to the progress bar! You'll want to avoid any interruptions while the firmware is updating as this will cause the upgrade to fail.</p> <p>Note</p> <p>If you have issues updating the software with the reset method chosen, try exiting the Receiver Upgrade menu by hitting the \"x\" button. Then disconnect and reconnect the module by selecting the \"Connect\" button. You will then need to open the Receiver Upgrade window again before hitting the \"Start\" button.</p> <p>Once the firmware has been updated, you will notice that the progress bar is at 100% and a message indicating that the firmware upgrade is finished. You can exit out of the window by clicking on the \"x\" button.</p> <p>Upon exiting, the you can continue viewing the UM980 output through the UPrecise software.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the Triband GNSS Antenna, GNSS RTK Breakout - UM980, and IoT RedBoard - ESP32 for embedded systems. Of course, you can also connect the UM980 directly to your computer without the need for a microcontroller if you decide to use the UPrecise Software as well.</p>"},{"location":"hardware_hookup/#l1l2l5-multiband-gnss-antenna","title":"L1/L2/L5 Multiband GNSS Antenna","text":"<p>Connect a compatible multi-band antenna that is capable of receiving L1, L2, and L5 bands. In this case, we used the \"GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H).\" This also has a ground plane embedded in the antenna. Insert the TNC side of the interface cable into the antenna's TNC connector. Secure the connection by tightening the screw until it is finger-tight. Then insert the SMA side of the interface cable into the Triband GNSS RTK Breakout's SMA connector. Secure the connection by using the SMA's hex nut until it is finger-tight.</p> <p>Note</p> <p>For users that are using a different multiband antenna, you may need to include a antenna ground plate to get the most of the multi-band antenna.</p> <p>Note</p> <p>Not all multiband antennas are made the same! Make sure that you are connecting a multi-band antenna that is capable of receiving L1/L2/L5 signals when using the Triband GNSS RTK Breakout - UM980.</p>"},{"location":"hardware_hookup/#microcontroller","title":"Microcontroller","text":"<p>Note</p> <p>The Arduino Library was written and tested with the ESP32 processor. We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For users using the breakout board in embedded applications, you will need to plug in the JST-GHR-04V Cable to the Triband GNSS RTK Breakout - UM980. You will then need to connect the other end to a microcontroller to process the data. In this case, we used the IoT RedBoard - ESP32.</p> IoT RedBoard - ESP32               Triband GNSS RTK Breakout - UM980              3V3 3.3V UART1_TX (D4) RX2 UART1_RX (D13) TX2 GND GND"},{"location":"hardware_hookup/#usb-to-microcontroller","title":"USB to Microcontroller","text":"<p>To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p>"},{"location":"hardware_hookup/#usb-to-triband-gnss-rtk-breakout-um980","title":"USB to Triband GNSS RTK Breakout - UM980","text":"<p>For users that simply want to connect to the board via USB, you will insert a USB C cable into the USB connector. Then connect the other end to your computer USB port.</p>"},{"location":"hardware_hookup/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Triband GNSS RTK Breakout - UM980. For more information, check out our Resources and Going Further for the UM980.</p> Top View Bottom View"},{"location":"hardware_overview/#um980-module","title":"UM980 Module","text":"<p>The board breaks out the UM980 which is an all-constellation, all-frequency, high precision RTK positioning module. This module has a low power consumption of about ~480mW.</p> <p>The UM980 is a 1408-Channel GNSS Receiver based on the Nebulas IV\u2122 that is able to simultaneously track multiple constellation for L1, L2, and L5 bands.</p> <ul> <li>Concurrent reception of GPS, GLONASS, Galileo, BeiDou, QZSS<ul> <li>GPS: L1C/A, L1C<sup>*</sup>, L2P(Y), L2C, L5</li> <li>GLONASS: L1, L2</li> <li>Galileo: E1, E5a, E5b, E6<sup>*</sup></li> <li>Beidou: B1I, B2I, B3I, B1C, B2a, B2b<sup>*</sup></li> <li>QZSS: L1/L2/L5</li> <li>SBAS</li> </ul> </li> </ul> <p><sub>*: Items marked with * are only supported by specific firmware.</sub></p> Image Courtesy of everythingRF <p>When a RTK solution is reached, the module can achieve a horizontal accuracy of about 8mm (~0.3 inches) and vertical accuracy of 15mm (~0.59 inches). The UM980 is capable of both rover and base station operations. Below are a few specs taken from the datasheet. For more information, check out the related documents for the UM980 in the Resources.</p> <ul> <li>Horizontal Accuracy<ul> <li>Autonomous: 1.5m</li> <li>DGPS: 0.4m</li> <li>RTK: 0.8cm + 1ppm</li> </ul> </li> <li>Vertical Accuracy<ul> <li>Autonomous: 2.5m</li> <li>DGPS: 0.8m</li> <li>RTK: 1.5cm + 1ppm</li> </ul> </li> <li>50Hz Data Update Rate<sup>*</sup></li> <li>Time-To-First-Fix:<ul> <li>Cold: 30s</li> <li>Warm: 20s</li> <li>Hot: 5s</li> </ul> </li> <li>CoCom Limits<ul> <li>Max Altitude: 18000m</li> <li>Max G: &lt;5G</li> <li>Max Velocity: 515m/s</li> </ul> </li> <li>Velocity Accuracy (RMS): 0.03m/s</li> <li>Time Accuracy (RMS): 20ns</li> </ul> <p><sub>*: Items marked with * are only supported by specific firmware.</sub></p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to connectors and through hole pads. Power is regulated down to 3.3V with the AP2122K 3.3V/600mA voltage regulator. The logic levels for the UM980 is 3.3V for the I/O pins.</p> <ul> <li>5V \u2014 Power from the USB C connector's VBUS provides power to the 5V bus. A resettable fuse is connected between the two nets The 5V net is also connected to the edge PTH pin labelled as 5V and the input of the 3.3V voltage regulator. Care must be taken when connecting to this pin to avoid conflicting voltages between the breakout board and anything connect to the 5V pin. Note that if users cut the default trace on VSEL and add solder between the center pad and pad labeled as 5V, the JST locking connector will provide 5V to any device connected on that port as well.</li> <li>VCC \u2014 The VCC pin on the JST locking connector provides 3.3V by default to any device that is connected to this port. Users can adjust this voltage by cutting the default trace on the VSEL jumper, and adding a solder blob between the center pad and pad labeled as 5V.</li> <li>3V3 \u2014 The 3V3 pin under the BlueSMiRF provides 3.3V to the any serial device that is connected. If a serial device that is connecting to this port has its own power supply, make sure to cut the trace on the BT-VCC jumper on the back to avoid conflicting voltages.</li> <li>VANT \u2014 The voltage antenna (VANT) pin connects to the VANT jumper's EXT pad. This will provide power to an active antenna on the SMA connector if users cut the default trace on the VANT jumper, and add a solder blob between the center pad and pad labeled as EXT.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul>"},{"location":"hardware_overview/#backup-battery","title":"Backup Battery","text":"<p>The small metal disk is a small 3V/1mAh lithium battery. This battery does not provide power to the IC like the 3.3V system does, but to relevant systems inside the IC that allow for a quick reconnection to satellites. The first time to fix (TTFF) is about ~30 seconds. With the backup battery, the warm start is less than 20 seconds and the hot start is less than 5 seconds.</p>"},{"location":"hardware_overview/#ch340-usb-to-serial-converter","title":"CH340 USB-to-Serial Converter How to Install CH340 Drivers","text":"<p>The top side of the board includes a CH340 USB-to-serial converter connected to the serial UART1 port. The chip can be used to send serial data between the device and computer. You can view the output or configure the device through a serial terminal. When using the UM980 with Unicore's UPrecise Software, you can also initiate firmware updates.</p> <p>The CH340 driver should automatically install on most operating systems. However, there is a wide range of operating systems out there. You may need to install drivers the first time you connect the chip to your computer's USB port or when there are operating system updates. For more information, check out our How to Install CH340 Drivers Tutorial.</p>"},{"location":"hardware_overview/#serial-uarts","title":"Serial UARTs","text":"<p>Note</p> <p>Current serial UART is only supported on the UM980 module. I<sup>2</sup>C, SPI, and CAN have been reserved on the module but are not currently supported.</p> <p>There are three serial UART ports available on the breakout board. Serial UART1 is connected to the CH340 USB-to-serial converter as stated earlier. Serial UART2 is connected to the 4-pin locking JST connector. Tx and Rx are also broken out as PTHs. We recommend using a compatible cable to connect to the locking JST connector to save time connecting to a microcontroller. Serial UART3 is connected to the PTH pins labeled as BlueSMiRF on the edge of the board.</p> UART1 UART2 UART3 <p>What is a BlueSMiRF?</p> <p>The BlueSMiRF was a Bluetooth device that was included in SparkFun's catalog. The footprint consists of a 1x6 header for the serial UART and power pins. Note that the arrangement of the header pins is different from USB-to-serial converters (i.e. FTDI Serial Breakout Boards and CH340 Serial Basics Boards).</p>"},{"location":"hardware_overview/#sma-connector","title":"SMA Connector","text":"<p>The board is populated with one SMA connector for a secure connection. You will need a multiband GNSS antenna capable of receiving L1, L2, and L5 bands to get the most out of the UM980. Note that this is intended for active antennas. We recommend using the GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) as it includes a built-in ground plane and SMA Male to TNC Male interface cable.</p>"},{"location":"hardware_overview/#breakout-pins","title":"Breakout Pins","text":"<p>Besides the power and serial UART pins, the following pins are also broken out on the edge of the breakout board.</p> <ul> <li>PPS \u2014 The PPS output pin provides a pulse per second when there is a satellite lock.  When the UM980 losses a satellite lock, the PPS will continue to blink for about 1 minute. Note that output pulse width and polarity can vary depending on the UM980's configuration. Make sure to check the Unicore Reference Commands Manual for more information.</li> <li>EVENT \u2014 The EVENT input pin and has an adjustable frequency and polarity.</li> <li>PVT \u2014 The PVT pin is a status pin and active high. This outputs high when positioning and low when not positioning. This is connected to an LED as well and will light up whenever the pin is high.</li> <li>RTK \u2014 The RTK pin is a status pin and active high. This outputs high for an RTK fixed solution, and low with other positioning status or no positioning. This is connected to an LED as well and will light up whenever the pin is high.</li> <li>ERR \u2014 The ERROR pin is active high when there is an error or failing self-detection. The pin is low when passing.</li> <li>RESET \u2014 The RESET pin is active low and resets the UM980. The recommended active time should be no less than 5ms.</li> <li>BIF29 \u2014 The BIF29 stands for the built-in function that was broken out from the UM980's pin 29. This is connected to a 10k\u03a9 pull-up resistor that was recommended as part of the design as a testing point. Note that this pin cannot connect to ground, power, or a peripheral I/O.</li> <li>BIF28 \u2014 The BIF28 stands for the built-in function that was broken out from the UM980's pin 28. This is connected to a 10k\u03a9 pull-up resistor that was recommended as part of the design as a testing point. Note that this pin cannot connect to ground, power, or a peripheral I/O.</li> </ul> Top View of Breakout Pins Bottom View of Breakout Pins"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 The power LED is connected to 3.3V and lights up with there is power on the board. Users can disable this LED by cutting the trace connecting the PWR jumper.</li> <li>PVT \u2014 The PVT LED is connected to the PVT pin. This lights up when positioning. Users can disable this LED by cutting the trace connecting the PVT jumper.</li> <li>PPS \u2014 By default, the PPS LED will blink when there is a satellite lock. When the UM980 losses a satellite lock, the PPS will continue to blink for about 1 minute. Note that output can vary depending on the UM980's configuration. Make sure to check the Unicore Reference Commands Manual for more information. Users can disable this LED by cutting the trace connecting the PPS jumper.</li> <li>RTK \u2014 The RTK LED lights up when there is an RTK fixed solution. Users can disable this LED by cutting the trace connecting the RTK jumper.</li> </ul>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>There are a few jumper pads available on the bottom of the board.</p> <ul> <li>SHLD \u2014 This jumper connects the USB Type C connector's shield pin to GND. Cut this to isolate the USB Type C connector's shield pin. This is for advanced users that want to ground their board to their enclosure instead of the ground plane.</li> <li>VSEL \u2014 This three way jumper sets voltage to the locking JST connector. By default, this is set to 3.3V. Cutting a trace and adding a solder blob between the center pad and the pad labeled as 5V will set the voltage on the locking JST connector to 5V.</li> <li>PWR \u2014 By default, this jumper is closed. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>PVT \u2014 By default, this jumper is closed. Cut this trace to disable the PVT LED connected to PVT.</li> <li>PPS \u2014 By default, this jumper is closed. Cut this trace to disable the PPS LED connected to PPS.</li> <li>RTK \u2014 By default, this jumper is closed. Cut this trace to disable the RTK LED connected to RTK.</li> <li>BT-VCC \u2014 By default, this jumper is closed and connected to 3.3V. If a serial device that is connecting to this port has its own power supply, cut this trace to avoid conflicting voltages.</li> <li>VANT \u2014 This three way jumper sets the voltage source for the active antenna. By default, this is connected to the INT and uses voltage provided from the board (specifically the UM980's VCC_RF pin). Cut this trace and add a solder blob between the center pad and the pad labeled as EXT to provide external power to your active antenna. Make sure to also provide power on the VANT PTH and connect GND from the external power supply the rest of the GND plane.</li> </ul>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 2.0\" x 2.0\" (50.8mm x 50.8mm). There are 4x mounting holes by each corner of the board.</p>"},{"location":"introduction/","title":"Introduction","text":"<pre><code> TODO\n\n _\u2713_ Introduction\n _\u2713_ Hardware Overview\n _\u2713_ Hardware Hookup\n _\u2713_ Arduino Library\n _\u2713_ Arduino Examples\n _\u2713_ UPrecise Software\n _\u2713_ Check Single Page include UPrecise, etc.\n ___ Post Cleanup\n   ___ Search\n   ___ Include new GitHub Repo folders under the list in README.md\n</code></pre> <p>The SparkFun Triband GNSS RTK Breakout features the UM980 GNSS high precision RTK position module from Unicore Communications. The UM980 is a 1408-Channel GNSS Receiver based on the Nebulas IV\u2122 that is able to simultaneously track GPS L1/L2/L5, GLONASS L1/L2, Galileo E1/E5a/E5b/E6, Beidou B1I/B2I/B3I/B1C/B2a/B2b, QZSS L1/L2/L5, and SBAS. With this board, you will be able to know where your (or any object's) X, Y, and Z location is within roughly the width of your fingernail. When an RTK solution is reached, the module can achieve a horizontal accuracy of about 8mm (~0.3 inches) and vertical accuracy of 15mm (~0.59 inches). The UM980 is capable of both rover and base station operations.</p> <p> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980    GPS-23286    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over the Arduino examples to get started.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch [CAB-17240]</li> <li>1x SparkFun Triband GNSS RTK Breakout - UM980 [GPS-23286]</li> <li>1x Interface Cable - SMA Male to TNC Male (300mm)  [CAB-17833]</li> <li>1x GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) [GPS-21801]</li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980    GPS-23286 </p> </li> </ul> <ul> <li> <p> </p> <p> Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch    CAB-17240 </p> </li> </ul> <ul> <li> <p> </p> <p> Reinforced Interface Cable - SMA Male to TNC Male (300mm)    CAB-21739 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H)    GPS-21801 </p> </li> </ul>"},{"location":"introduction/#gnss-accessories-optional","title":"GNSS Accessories \u00a0(Optional)","text":"<p>Depending on your setup, you may need the following mounting hardware. Note that the antenna ground plate is needed for tri-band antennas that do not have a ground plane.</p> <ul> <li>GNSS Magnetic Mount [PRT-21257]</li> <li>GNSS Antenna Mounting Hardware Kit [KIT-22197]</li> <li>GPS Antenna Ground Plate [GPS-17519]</li> </ul> <ul> <li> <p> </p> <p> GNSS Magnetic Antenna Mount - 5/8\" 11-TPI    TOL-21257 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Antenna Mounting Hardware Kit    KIT-22197 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul>"},{"location":"introduction/#radios-optional","title":"Radios \u00a0(Optional)","text":"<p>For users that require radios to transmit RTK correction data, you could use the following radios.</p> <ul> <li>SiK Telemetry Radio V3 - 915MHz, 100mW [WRL-19032]</li> <li>SparkFun LoRaSerial Kit - 915MHz (Enclosed) [WRL-20029]</li> </ul> <ul> <li> <p> </p> <p> SiK Telemetry Radio V3 - 915MHz, 100mW    WRL-19032 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LoRaSerial Kit - 915MHz (Enclosed)    WRL-20029 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes.</p> <ul> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> <li>Flush Cutters - Xcelite [TOL-14782]</li> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul>"},{"location":"introduction/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>As listed earlier, recommend using the 4-pin JST-GHR-04V cable to connect directly to the IoT RedBoard - ESP32's female header pins. However, you could also use IC hooks for a temporary connection depending on your setup and what you have available. For those that prefer to the 0.1\" spaced PTH, you will want to solder header pins for a secure connection.</p> <ul> <li>Breadboard - Self-Adhesive (White) [PRT-12002]</li> <li>IC Hook with Pigtail [CAB-09741]</li> <li>Break Away Headers - Straight [PRT-00116]</li> <li>Female Headers [PRT-00115]</li> <li>Jumper Wires Premium 6\" M/M Pack of 10 [PRT-08431]</li> </ul> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> GPS Basics </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>New Video: Unlocking High-Precision RTK Positioning</p>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun TriBand GNSS RTK- Breakout - UM980 up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Unicore Communications UM980<ul> <li>General Specifications (PDF)</li> <li>Datasheet (PDF)</li> <li>User Manual (PDF)</li> <li>Reference Commands Manual (PDF)</li> <li>UPrecise V1.0 (EXE)</li> <li>UPrecise User Manual (PDF)</li> </ul> </li> <li>Qwiic Info Page</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<pre><code> TODO\n\n _\u2713_ Introduction\n _\u2713_ Hardware Overview\n _\u2713_ Hardware Hookup\n _\u2713_ Arduino Library\n _\u2713_ Arduino Examples\n _\u2713_ UPrecise Software\n _\u2713_ Check Single Page include UPrecise, etc.\n ___ Post Cleanup\n   ___ Search\n   ___ Include new GitHub Repo folders under the list in README.md\n</code></pre> <p>The SparkFun Triband GNSS RTK Breakout features the UM980 GNSS high precision RTK position module from Unicore Communications. The UM980 is a 1408-Channel GNSS Receiver based on the Nebulas IV\u2122 that is able to simultaneously track GPS L1/L2/L5, GLONASS L1/L2, Galileo E1/E5a/E5b/E6, Beidou B1I/B2I/B3I/B1C/B2a/B2b, QZSS L1/L2/L5, and SBAS. With this board, you will be able to know where your (or any object's) X, Y, and Z location is within roughly the width of your fingernail. When an RTK solution is reached, the module can achieve a horizontal accuracy of about 8mm (~0.3 inches) and vertical accuracy of 15mm (~0.59 inches). The UM980 is capable of both rover and base station operations.</p> <p> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980    GPS-23286    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over the Arduino examples to get started.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch [CAB-17240]</li> <li>1x SparkFun Triband GNSS RTK Breakout - UM980 [GPS-23286]</li> <li>1x Interface Cable - SMA Male to TNC Male (300mm)  [CAB-17833]</li> <li>1x GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) [GPS-21801]</li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980    GPS-23286 </p> </li> </ul> <ul> <li> <p> </p> <p> Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch    CAB-17240 </p> </li> </ul> <ul> <li> <p> </p> <p> Reinforced Interface Cable - SMA Male to TNC Male (300mm)    CAB-21739 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H)    GPS-21801 </p> </li> </ul>"},{"location":"single_page/#gnss-accessories-optional","title":"GNSS Accessories \u00a0(Optional)","text":"<p>Depending on your setup, you may need the following mounting hardware. Note that the antenna ground plate is needed for tri-band antennas that do not have a ground plane.</p> <ul> <li>GNSS Magnetic Mount [PRT-21257]</li> <li>GNSS Antenna Mounting Hardware Kit [KIT-22197]</li> <li>GPS Antenna Ground Plate [GPS-17519]</li> </ul> <ul> <li> <p> </p> <p> GNSS Magnetic Antenna Mount - 5/8\" 11-TPI    TOL-21257 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Antenna Mounting Hardware Kit    KIT-22197 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul>"},{"location":"single_page/#radios-optional","title":"Radios \u00a0(Optional)","text":"<p>For users that require radios to transmit RTK correction data, you could use the following radios.</p> <ul> <li>SiK Telemetry Radio V3 - 915MHz, 100mW [WRL-19032]</li> <li>SparkFun LoRaSerial Kit - 915MHz (Enclosed) [WRL-20029]</li> </ul> <ul> <li> <p> </p> <p> SiK Telemetry Radio V3 - 915MHz, 100mW    WRL-19032 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LoRaSerial Kit - 915MHz (Enclosed)    WRL-20029 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes.</p> <ul> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> <li>Flush Cutters - Xcelite [TOL-14782]</li> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul>"},{"location":"single_page/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>As listed earlier, recommend using the 4-pin JST-GHR-04V cable to connect directly to the IoT RedBoard - ESP32's female header pins. However, you could also use IC hooks for a temporary connection depending on your setup and what you have available. For those that prefer to the 0.1\" spaced PTH, you will want to solder header pins for a secure connection.</p> <ul> <li>Breadboard - Self-Adhesive (White) [PRT-12002]</li> <li>IC Hook with Pigtail [CAB-09741]</li> <li>Break Away Headers - Straight [PRT-00116]</li> <li>Female Headers [PRT-00115]</li> <li>Jumper Wires Premium 6\" M/M Pack of 10 [PRT-08431]</li> </ul> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> GPS Basics </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>New Video: Unlocking High-Precision RTK Positioning</p>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Triband GNSS RTK Breakout - UM980. For more information, check out our Resources and Going Further for the UM980.</p> Top View Bottom View"},{"location":"single_page/#um980-module","title":"UM980 Module","text":"<p>The board breaks out the UM980 which is an all-constellation, all-frequency, high precision RTK positioning module. This module has a low power consumption of about ~480mW.</p> <p>The UM980 is a 1408-Channel GNSS Receiver based on the Nebulas IV\u2122 that is able to simultaneously track multiple constellation for L1, L2, and L5 bands.</p> <ul> <li>Concurrent reception of GPS, GLONASS, Galileo, BeiDou, QZSS<ul> <li>GPS: L1C/A, L1C<sup>*</sup>, L2P(Y), L2C, L5</li> <li>GLONASS: L1, L2</li> <li>Galileo: E1, E5a, E5b, E6<sup>*</sup></li> <li>Beidou: B1I, B2I, B3I, B1C, B2a, B2b<sup>*</sup></li> <li>QZSS: L1/L2/L5</li> <li>SBAS</li> </ul> </li> </ul> <p><sub>*: Items marked with * are only supported by specific firmware.</sub></p> Image Courtesy of everythingRF <p>When a RTK solution is reached, the module can achieve a horizontal accuracy of about 8mm (~0.3 inches) and vertical accuracy of 15mm (~0.59 inches). The UM980 is capable of both rover and base station operations. Below are a few specs taken from the datasheet. For more information, check out the related documents for the UM980 in the Resources.</p> <ul> <li>Horizontal Accuracy<ul> <li>Autonomous: 1.5m</li> <li>DGPS: 0.4m</li> <li>RTK: 0.8cm + 1ppm</li> </ul> </li> <li>Vertical Accuracy<ul> <li>Autonomous: 2.5m</li> <li>DGPS: 0.8m</li> <li>RTK: 1.5cm + 1ppm</li> </ul> </li> <li>50Hz Data Update Rate<sup>*</sup></li> <li>Time-To-First-Fix:<ul> <li>Cold: 30s</li> <li>Warm: 20s</li> <li>Hot: 5s</li> </ul> </li> <li>CoCom Limits<ul> <li>Max Altitude: 18000m</li> <li>Max G: &lt;5G</li> <li>Max Velocity: 515m/s</li> </ul> </li> <li>Velocity Accuracy (RMS): 0.03m/s</li> <li>Time Accuracy (RMS): 20ns</li> </ul> <p><sub>*: Items marked with * are only supported by specific firmware.</sub></p>"},{"location":"single_page/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out to connectors and through hole pads. Power is regulated down to 3.3V with the AP2122K 3.3V/600mA voltage regulator. The logic levels for the UM980 is 3.3V for the I/O pins.</p> <ul> <li>5V \u2014 Power from the USB C connector's VBUS provides power to the 5V bus. A resettable fuse is connected between the two nets The 5V net is also connected to the edge PTH pin labelled as 5V and the input of the 3.3V voltage regulator. Care must be taken when connecting to this pin to avoid conflicting voltages between the breakout board and anything connect to the 5V pin. Note that if users cut the default trace on VSEL and add solder between the center pad and pad labeled as 5V, the JST locking connector will provide 5V to any device connected on that port as well.</li> <li>VCC \u2014 The VCC pin on the JST locking connector provides 3.3V by default to any device that is connected to this port. Users can adjust this voltage by cutting the default trace on the VSEL jumper, and adding a solder blob between the center pad and pad labeled as 5V.</li> <li>3V3 \u2014 The 3V3 pin under the BlueSMiRF provides 3.3V to the any serial device that is connected. If a serial device that is connecting to this port has its own power supply, make sure to cut the trace on the BT-VCC jumper on the back to avoid conflicting voltages.</li> <li>VANT \u2014 The voltage antenna (VANT) pin connects to the VANT jumper's EXT pad. This will provide power to an active antenna on the SMA connector if users cut the default trace on the VANT jumper, and add a solder blob between the center pad and pad labeled as EXT.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul>"},{"location":"single_page/#backup-battery","title":"Backup Battery","text":"<p>The small metal disk is a small 3V/1mAh lithium battery. This battery does not provide power to the IC like the 3.3V system does, but to relevant systems inside the IC that allow for a quick reconnection to satellites. The first time to fix (TTFF) is about ~30 seconds. With the backup battery, the warm start is less than 20 seconds and the hot start is less than 5 seconds.</p>"},{"location":"single_page/#ch340-usb-to-serial-converter","title":"CH340 USB-to-Serial Converter How to Install CH340 Drivers","text":"<p>The top side of the board includes a CH340 USB-to-serial converter connected to the serial UART1 port. The chip can be used to send serial data between the device and computer. You can view the output or configure the device through a serial terminal. When using the UM980 with Unicore's UPrecise Software, you can also initiate firmware updates.</p> <p>The CH340 driver should automatically install on most operating systems. However, there is a wide range of operating systems out there. You may need to install drivers the first time you connect the chip to your computer's USB port or when there are operating system updates. For more information, check out our How to Install CH340 Drivers Tutorial.</p>"},{"location":"single_page/#serial-uarts","title":"Serial UARTs","text":"<p>Note</p> <p>Current serial UART is only supported on the UM980 module. I<sup>2</sup>C, SPI, and CAN have been reserved on the module but are not currently supported.</p> <p>There are three serial UART ports available on the breakout board. Serial UART1 is connected to the CH340 USB-to-serial converter as stated earlier. Serial UART2 is connected to the 4-pin locking JST connector. Tx and Rx are also broken out as PTHs. We recommend using a compatible cable to connect to the locking JST connector to save time connecting to a microcontroller. Serial UART3 is connected to the PTH pins labeled as BlueSMiRF on the edge of the board.</p> UART1 UART2 UART3 <p>What is a BlueSMiRF?</p> <p>The BlueSMiRF was a Bluetooth device that was included in SparkFun's catalog. The footprint consists of a 1x6 header for the serial UART and power pins. Note that the arrangement of the header pins is different from USB-to-serial converters (i.e. FTDI Serial Breakout Boards and CH340 Serial Basics Boards).</p>"},{"location":"single_page/#sma-connector","title":"SMA Connector","text":"<p>The board is populated with one SMA connector for a secure connection. You will need a multiband GNSS antenna capable of receiving L1, L2, and L5 bands to get the most out of the UM980. Note that this is intended for active antennas. We recommend using the GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) as it includes a built-in ground plane and SMA Male to TNC Male interface cable.</p>"},{"location":"single_page/#breakout-pins","title":"Breakout Pins","text":"<p>Besides the power and serial UART pins, the following pins are also broken out on the edge of the breakout board.</p> <ul> <li>PPS \u2014 The PPS output pin provides a pulse per second when there is a satellite lock.  When the UM980 losses a satellite lock, the PPS will continue to blink for about 1 minute. Note that output pulse width and polarity can vary depending on the UM980's configuration. Make sure to check the Unicore Reference Commands Manual for more information.</li> <li>EVENT \u2014 The EVENT input pin and has an adjustable frequency and polarity.</li> <li>PVT \u2014 The PVT pin is a status pin and active high. This outputs high when positioning and low when not positioning. This is connected to an LED as well and will light up whenever the pin is high.</li> <li>RTK \u2014 The RTK pin is a status pin and active high. This outputs high for an RTK fixed solution, and low with other positioning status or no positioning. This is connected to an LED as well and will light up whenever the pin is high.</li> <li>ERR \u2014 The ERROR pin is active high when there is an error or failing self-detection. The pin is low when passing.</li> <li>RESET \u2014 The RESET pin is active low and resets the UM980. The recommended active time should be no less than 5ms.</li> <li>BIF29 \u2014 The BIF29 stands for the built-in function that was broken out from the UM980's pin 29. This is connected to a 10k\u03a9 pull-up resistor that was recommended as part of the design as a testing point. Note that this pin cannot connect to ground, power, or a peripheral I/O.</li> <li>BIF28 \u2014 The BIF28 stands for the built-in function that was broken out from the UM980's pin 28. This is connected to a 10k\u03a9 pull-up resistor that was recommended as part of the design as a testing point. Note that this pin cannot connect to ground, power, or a peripheral I/O.</li> </ul> Top View of Breakout Pins Bottom View of Breakout Pins"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 The power LED is connected to 3.3V and lights up with there is power on the board. Users can disable this LED by cutting the trace connecting the PWR jumper.</li> <li>PVT \u2014 The PVT LED is connected to the PVT pin. This lights up when positioning. Users can disable this LED by cutting the trace connecting the PVT jumper.</li> <li>PPS \u2014 By default, the PPS LED will blink when there is a satellite lock. When the UM980 losses a satellite lock, the PPS will continue to blink for about 1 minute. Note that output can vary depending on the UM980's configuration. Make sure to check the Unicore Reference Commands Manual for more information. Users can disable this LED by cutting the trace connecting the PPS jumper.</li> <li>RTK \u2014 The RTK LED lights up when there is an RTK fixed solution. Users can disable this LED by cutting the trace connecting the RTK jumper.</li> </ul>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>There are a few jumper pads available on the bottom of the board.</p> <ul> <li>SHLD \u2014 This jumper connects the USB Type C connector's shield pin to GND. Cut this to isolate the USB Type C connector's shield pin. This is for advanced users that want to ground their board to their enclosure instead of the ground plane.</li> <li>VSEL \u2014 This three way jumper sets voltage to the locking JST connector. By default, this is set to 3.3V. Cutting a trace and adding a solder blob between the center pad and the pad labeled as 5V will set the voltage on the locking JST connector to 5V.</li> <li>PWR \u2014 By default, this jumper is closed. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>PVT \u2014 By default, this jumper is closed. Cut this trace to disable the PVT LED connected to PVT.</li> <li>PPS \u2014 By default, this jumper is closed. Cut this trace to disable the PPS LED connected to PPS.</li> <li>RTK \u2014 By default, this jumper is closed. Cut this trace to disable the RTK LED connected to RTK.</li> <li>BT-VCC \u2014 By default, this jumper is closed and connected to 3.3V. If a serial device that is connecting to this port has its own power supply, cut this trace to avoid conflicting voltages.</li> <li>VANT \u2014 This three way jumper sets the voltage source for the active antenna. By default, this is connected to the INT and uses voltage provided from the board (specifically the UM980's VCC_RF pin). Cut this trace and add a solder blob between the center pad and the pad labeled as EXT to provide external power to your active antenna. Make sure to also provide power on the VANT PTH and connect GND from the external power supply the rest of the GND plane.</li> </ul>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 2.0\" x 2.0\" (50.8mm x 50.8mm). There are 4x mounting holes by each corner of the board.</p>"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the Triband GNSS Antenna, GNSS RTK Breakout - UM980, and IoT RedBoard - ESP32 for embedded systems. Of course, you can also connect the UM980 directly to your computer without the need for a microcontroller if you decide to use the UPrecise Software as well.</p>"},{"location":"single_page/#l1l2l5-multiband-gnss-antenna","title":"L1/L2/L5 Multiband GNSS Antenna","text":"<p>Connect a compatible multi-band antenna that is capable of receiving L1, L2, and L5 bands. In this case, we used the \"GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H).\" This also has a ground plane embedded in the antenna. Insert the TNC side of the interface cable into the antenna's TNC connector. Secure the connection by tightening the screw until it is finger-tight. Then insert the SMA side of the interface cable into the Triband GNSS RTK Breakout's SMA connector. Secure the connection by using the SMA's hex nut until it is finger-tight.</p> <p>Note</p> <p>For users that are using a different multiband antenna, you may need to include a antenna ground plate to get the most of the multi-band antenna.</p> <p>Note</p> <p>Not all multiband antennas are made the same! Make sure that you are connecting a multi-band antenna that is capable of receiving L1/L2/L5 signals when using the Triband GNSS RTK Breakout - UM980.</p>"},{"location":"single_page/#microcontroller","title":"Microcontroller","text":"<p>Note</p> <p>The Arduino Library was written and tested with the ESP32 processor. We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For users using the breakout board in embedded applications, you will need to plug in the JST-GHR-04V Cable to the Triband GNSS RTK Breakout - UM980. You will then need to connect the other end to a microcontroller to process the data. In this case, we used the IoT RedBoard - ESP32.</p> IoT RedBoard - ESP32               Triband GNSS RTK Breakout - UM980              3V3 3.3V UART1_TX (D4) RX2 UART1_RX (D13) TX2 GND GND"},{"location":"single_page/#usb-to-microcontroller","title":"USB to Microcontroller","text":"<p>To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p>"},{"location":"single_page/#usb-to-triband-gnss-rtk-breakout-um980","title":"USB to Triband GNSS RTK Breakout - UM980","text":"<p>For users that simply want to connect to the board via USB, you will insert a USB C cable into the USB connector. Then connect the other end to your computer USB port.</p>"},{"location":"single_page/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>SparkFun has written a library to work with the Unicore UM980 module. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun Unicore GNSS\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun Unicore GNSS Arduino Library (ZIP)"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can get started playing around with the breakout board. For the scope of this tutorial, we will go over the examples from the Arduino Library. From there, we will be able to build our own custom code to integrate the development board into a project.</p>"},{"location":"single_page/#example-1-position-velocity-and-time","title":"Example 1: Position, Velocity, and Time","text":"<p>In this example, we will query a UM980's UART2 port for its position, velocity, and time data.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example1_PositionVelocityTime . If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Give it a moment to check the satellites in view. You will be able to see your position, velocity, date, time, and the number of satellites in view.</p>"},{"location":"single_page/#example-2-direct-connect","title":"Example 2: Direct Connect","text":"<p>In this example, characters coming from the UM980's UART2 port are echoed and send characters to the UM980. This allows a user to directly enter command strings into the UM980 while still connected to the Arduino. This is good for viewing the raw output from a given command.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example2_DirectConnect . If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200. For this example, make sure to have both NL &amp; *CR turned on.</p> <p>Type CONFIG and send the command through the serial terminal. You should receive a response with the current UM980 configuration. Make sure to check out the UM980's Reference Commands Manual linked in the Resources for more commands.</p>"},{"location":"single_page/#example-3-ecef-and-stats","title":"Example 3: ECEF and Stats","text":"<p>This example will query the UM980's UART2 port for the signal quality and fix type.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example3_ECEFandStats . If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>The output will be similar to example 1 with additional information.</p>"},{"location":"single_page/#example-4-enable-nmea-at-5hz","title":"Example 4: Enable NMEA at 5Hz","text":"<p>This example shows how to enable various NMEA sentences at different rates on different ports at 5Hz.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example4_EnableNMEA_5Hz .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>The output will begin outputting NEMA sentences.</p>"},{"location":"single_page/#example-5-enable-rtcm","title":"Example 5: Enable RTCM","text":"<p>This example shows how to configure the UM980 into base mode using specified coordinates.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example5_EnableRTCM .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the example will begin outputting the RTCM data. The Serial Terminal will output random characters due to the RTCM being in binary. This data will be interpreted by other high precision RTK GNSS modules.</p>"},{"location":"single_page/#example-6-average-base","title":"Example 6: Average Base","text":"<p>This example shows how to put the UM980 into a Base mode configuration using the average of positional fixes obtained over a 60 second period. We also turn on RTCM messages.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example6_AverageBase .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the example will begin outputting certain NMEA sentences and RTCM messages.</p>"},{"location":"single_page/#example-7-fixed-base","title":"Example 7: Fixed Base","text":"<p>This example shows how to put the UM980 into a Base mode configuration using specified coordinates.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example7_FixedBase .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the example will begin outputting certain NMEA sentences and RTCM messages.</p>"},{"location":"single_page/#example-8-set-constellations","title":"Example 8: Set Constellations","text":"<p>This example enables/disables various constellations to be included in position calculations for GPS, GLO, BDS, GAL, and QZSS.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example8_SetConstellations .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will respond with a message indicating if the GPS was enabled and the configuration is complete.</p>"},{"location":"single_page/#example-9-signal-elevation","title":"Example 9: Signal Elevation","text":"<p>This example shows how set the Elevation Angle and minimum CN0 value required from a satellite to be included in the position calculation.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example9_SignalEleveation .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is configured.</p>"},{"location":"single_page/#example-10-set-rover-mode","title":"Example 10: Set Rover Mode","text":"<p>This example shows how set the station mode to Survey, UAV, or Automotive.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example10_SetRoverMode.  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is configured. If you need to configure the device for a different mode, you will just need to use a single line comment (<code>//</code>) to adjust the code.</p>"},{"location":"single_page/#example-11-usb-nmea","title":"Example 11: USB NMEA","text":"<p>This sketch turns on all the major NMEA sentences at 2Hz and prints the incoming serial out to the Serial port. This is useful for viewing the GNSS data in a program like u-center (u-blox's software) or UPrecise (Unicore's software).</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example11_UsbNMEA .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is configured.</p> <p>Disconnect the UM980 from the IoT RedBoard - ESP32. Then disconnect the USB cable from the IoT RedBoard - ESP32. Connect the USB cable between the UM980 and your computer. Open a terminal emulator set at 115200 baud. Once connected, you should begin seeing NMEA sentences through the USB port.</p> <p>Of course, you can also view the data through a GUI such as the u-center (u-blox's software) or UPrecise (Unicore's software) as well.</p>"},{"location":"single_page/#example-12-factory-reset","title":"Example 12: Factory Reset","text":"<p>This example shows how set the UM980 back to factory defaults.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example12_FactoryReset .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you when the UM980 is ready to be configured. Send a character through the Serial Monitor to factory reset the UM980. The code will then begin outputting the position, velocity, date, time, and satellites as shown in example 1. Give it a moment to check the satellites in view before getting valid data.</p>"},{"location":"single_page/#example-13-send-command","title":"Example 13: Send Command","text":"<p>While the SparkFun UM980 Arduino library covers most of the features in the UM980, there may be a special command that is needed but not supported. This sketch shows how to send commands directly to the UM980.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example13_SendCommand* .  If you have not already, select your Board (in this case the **SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, there's not too much in the output. Try adjusting the ASCII command within the <code>myGNSS.sendCommand()</code> to send a different special command. For more information, try looking at the Reference Commands Manual in the Resources.</p>"},{"location":"single_page/#example-14-set-pps","title":"Example 14: Set PPS","text":"<p>The example shows how to configure the PPS signal's width, frequency, and polarity.  </p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example14_SetPPS .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output just tells you the rate that the PPS is blinking at. If you look at the PPS LED on the UM980, the LED will blink at the rate that was set.</p>"},{"location":"single_page/#example-15-query-device","title":"Example 15: Query Device","text":"<p>This example shows how to send the 'CONFIG' command to get a clear text response that the user can parse to see which settings are set. In this case, we will get the current configuration, version, mode, and mask from the UM980.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example15_QueryDevice .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p>"},{"location":"single_page/#example-16-poll-for-valid-rtcm-messages","title":"Example 16: Poll for Valid RTCM Messages","text":"<p>The documentation for the UM980 does not explicitly state which RTCM messages are supported but by sending the enable command to the module we can insinuate which are supported. This sketch sends the 'RTCMxxxx' command and looks for an OK.</p> <p>From the menu, select the following: File &gt; Examples &gt; SparkFun UM980 Triband RTK GNSS Arduino Library &gt; Example15_PollForValidRTCMMessages .  If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Then hit the upload button. After uploading the code, open the Serial Monitor or terminal emulator of your choice with a baud rate set to 115200.</p> <p>Once open, the output will notify you of the RTCM messages that are supported. As of the writing of this tutorial, there are 55 RTCM messages that are supported!</p>"},{"location":"single_page/#installing-uprecise","title":"Installing UPrecise","text":"<p>--8&lt;-- \"./docs/uprecise.md</p>"},{"location":"single_page/#firmware-update","title":"Firmware Update","text":"<p>--8&lt;-- \"./docs/firmware_update.md</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun TriBand GNSS RTK- Breakout - UM980 up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Unicore Communications UM980<ul> <li>General Specifications (PDF)</li> <li>Datasheet (PDF)</li> <li>User Manual (PDF)</li> <li>Reference Commands Manual (PDF)</li> <li>UPrecise V1.0 (EXE)</li> <li>UPrecise User Manual (PDF)</li> </ul> </li> <li>Qwiic Info Page</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"uprecise/","title":"Installing UPrecise","text":"<p>For users interested in the a GUI to visualize the data, there is the UPrecise Software. You can head over to Unicore's product page for the UM980 and select the \"Data Manual\" tab. Or clicking on the button below to download UPrecise.</p> Click Here to Download UPrecise V1.0.639 (EXE) <p>Note</p> <p>For the latest software version, you may want to check the UM980's product page or Unicore's Download Center.</p> <p>Once downloaded, select the executable and follow the prompts to install the software to your computer. Note that the software is currently only supported on Windows 7/8/10, 64-bit OS.</p>"},{"location":"uprecise/#selecting-a-language","title":"Selecting a Language","text":"<p>After downloading and installing UPrecise, open the software up! There are two languages that are supported with the software. For the scope of this tutorial, we'll be using the software in English. Click on \"CH\" button to change the default language from Chinese to English.</p> <p>The language will switch to English similar to the image below.</p>"},{"location":"uprecise/#connecting-the-um980-breakout-board-to-a-computer","title":"Connecting the UM980 Breakout Board to a Computer","text":"<p>We will assume that you have a triband multiband antenna connected to the UM980's breakout board and USB cable connected to your computer. Select the COM port that the CH340 enumerated to. There is no need to make a selection in the other two drop down menus by the COM port since the software automatically determines the receiver and baud rate. In this case, it was COM17. You may need to open your device manager to determine which COM port the CH340 enumerated to.</p> <p>Once connected, try exploring the features available on the software as the UM980 sends data to your COM port. You can also check out the UPrecise user manual for more information on the software:</p> UPrecise User Manual R1.01 - English (PDF)"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Triband GNSS RTK Breakout - UM980 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Triband GNSS RTK Breakout repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Triband GNSS RTK Breakout repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Triband GNSS RTK Breakout repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}